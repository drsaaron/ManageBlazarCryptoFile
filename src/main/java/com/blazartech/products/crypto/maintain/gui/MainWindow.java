/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * MainWindow.java
 *
 * Created on Apr 2, 2014, 11:14:42 AM
 */
package com.blazartech.products.crypto.maintain.gui;

import com.blazartech.products.crypto.BlazarCryptoFile;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * a GUI to allow updates to the crypto file.  This will be a singleton as not
 * all executions of the program will require this window to be created, and we
 * only want to create it if we actually use it.
 * 
 * @author aar1069
 */
@Component
@Scope("prototype")
public class MainWindow extends JFrame implements InitializingBean {

    private static final Logger logger = Logger.getLogger(MainWindow.class);

    @Autowired
    private BlazarCryptoFile cryptoFile;

    @Autowired
    private CryptoFileTableModel cryptoFileTableModel;

    static {
        // use Nimbus look & feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            logger.error("error setting look & feel: " + e.getMessage(), e);
            throw new RuntimeException("error setting look & feel: " + e.getMessage(), e);
        }
    }
    
    /**
     * Creates new form MainWindow
     */
    @Override
    public void afterPropertiesSet() {
        initComponents();

        ListSelectionModel selectionModel = fileTable.getSelectionModel();
        selectionModel.addListSelectionListener((ListSelectionEvent e) -> {
            if (e.getValueIsAdjusting()) {
                return;
            }
            handleRowSelection();
        });
    }

    private void handleRowSelection() {
        updateButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Blazar crypto file");

        fileTable.setModel(cryptoFileTableModel);
        jScrollPane1.setViewportView(fileTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        updateButton.setText("Update");
        updateButton.setToolTipText("update the password");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int rowNumber = fileTable.getSelectedRow();
        CryptoFileTableModel model = (CryptoFileTableModel) fileTable.getModel();
        String userID = (String) model.getValueAt(rowNumber, 0);
        String resource = (String) model.getValueAt(rowNumber, 1);

        NewPasswordEntryForm entryForm = new NewPasswordEntryForm();
        entryForm.setUserID(userID);
        entryForm.setResource(resource);

        if (JOptionPane.showConfirmDialog(this, entryForm, "update password", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            String newPassword = entryForm.getPassword();
            cryptoFile.updatePassword(userID, resource, newPassword);
            model.fireTableDataChanged();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable fileTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
